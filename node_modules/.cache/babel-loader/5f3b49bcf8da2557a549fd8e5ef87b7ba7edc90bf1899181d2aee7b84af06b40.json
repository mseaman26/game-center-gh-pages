{"ast":null,"code":"import jwt_decode from 'jwt-decode';\nclass AuthService {\n  getProfile() {\n    if (!this.getToken()) {\n      return;\n    }\n    //console.log(jwt_decode(this.getToken()))\n    return jwt_decode(this.getToken());\n  }\n  loggedIn() {\n    const token = this.getToken();\n    // If there is a token and it's not expired, return `true`\n    return token && !this.isTokenExpired(token) ? true : false;\n  }\n  isTokenExpired(token) {\n    // Decode the token to get its expiration time that was set by the server\n    const decoded = jwt_decode(token);\n    // If the expiration time is less than the current time (in seconds), the token is expired and we return `true`\n    if (decoded.exp < Date.now() / 1000) {\n      localStorage.removeItem('id_token');\n      return true;\n    }\n    // If token hasn't passed its expiration time, return `false`\n    return false;\n  }\n  getToken() {\n    return localStorage.getItem('id_token');\n  }\n  login(idToken) {\n    localStorage.setItem('id_token', idToken);\n    window.location.assign('/');\n  }\n  logout() {\n    localStorage.removeItem('id_token');\n    window.location.reload();\n  }\n}\nexport default new AuthService();","map":{"version":3,"names":["jwt_decode","AuthService","getProfile","getToken","loggedIn","token","isTokenExpired","decoded","exp","Date","now","localStorage","removeItem","getItem","login","idToken","setItem","window","location","assign","logout","reload"],"sources":["/Users/michaelseaman/Desktop/programming_projects/Collaborations/Game-Center/client/src/utils/auth.js"],"sourcesContent":["import jwt_decode from 'jwt-decode';\n\nclass AuthService {\n  getProfile() {\n    if(!this.getToken()){\n      return\n    }\n    //console.log(jwt_decode(this.getToken()))\n    return jwt_decode(this.getToken());\n  }\n\n  loggedIn() {\n    const token = this.getToken();\n    // If there is a token and it's not expired, return `true`\n    return token && !this.isTokenExpired(token) ? true : false;\n  }\n\n  isTokenExpired(token) {\n    // Decode the token to get its expiration time that was set by the server\n    const decoded = jwt_decode(token);\n    // If the expiration time is less than the current time (in seconds), the token is expired and we return `true`\n    if (decoded.exp < Date.now() / 1000) {\n      localStorage.removeItem('id_token');\n      return true;\n    }\n    // If token hasn't passed its expiration time, return `false`\n    return false;\n  }\n\n  getToken() {\n    return localStorage.getItem('id_token');\n  }\n\n  login(idToken) {\n    localStorage.setItem('id_token', idToken);\n    window.location.assign('/');\n  }\n\n  logout() {\n    localStorage.removeItem('id_token');\n    window.location.reload();\n  }\n}\n\nexport default new AuthService();\n"],"mappings":"AAAA,OAAOA,UAAU,MAAM,YAAY;AAEnC,MAAMC,WAAW,CAAC;EAChBC,UAAUA,CAAA,EAAG;IACX,IAAG,CAAC,IAAI,CAACC,QAAQ,CAAC,CAAC,EAAC;MAClB;IACF;IACA;IACA,OAAOH,UAAU,CAAC,IAAI,CAACG,QAAQ,CAAC,CAAC,CAAC;EACpC;EAEAC,QAAQA,CAAA,EAAG;IACT,MAAMC,KAAK,GAAG,IAAI,CAACF,QAAQ,CAAC,CAAC;IAC7B;IACA,OAAOE,KAAK,IAAI,CAAC,IAAI,CAACC,cAAc,CAACD,KAAK,CAAC,GAAG,IAAI,GAAG,KAAK;EAC5D;EAEAC,cAAcA,CAACD,KAAK,EAAE;IACpB;IACA,MAAME,OAAO,GAAGP,UAAU,CAACK,KAAK,CAAC;IACjC;IACA,IAAIE,OAAO,CAACC,GAAG,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,IAAI,EAAE;MACnCC,YAAY,CAACC,UAAU,CAAC,UAAU,CAAC;MACnC,OAAO,IAAI;IACb;IACA;IACA,OAAO,KAAK;EACd;EAEAT,QAAQA,CAAA,EAAG;IACT,OAAOQ,YAAY,CAACE,OAAO,CAAC,UAAU,CAAC;EACzC;EAEAC,KAAKA,CAACC,OAAO,EAAE;IACbJ,YAAY,CAACK,OAAO,CAAC,UAAU,EAAED,OAAO,CAAC;IACzCE,MAAM,CAACC,QAAQ,CAACC,MAAM,CAAC,GAAG,CAAC;EAC7B;EAEAC,MAAMA,CAAA,EAAG;IACPT,YAAY,CAACC,UAAU,CAAC,UAAU,CAAC;IACnCK,MAAM,CAACC,QAAQ,CAACG,MAAM,CAAC,CAAC;EAC1B;AACF;AAEA,eAAe,IAAIpB,WAAW,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}